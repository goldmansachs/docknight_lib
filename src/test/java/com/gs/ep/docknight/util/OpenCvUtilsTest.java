/*
 *   Copyright 2020 Goldman Sachs.
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

package com.gs.ep.docknight.util;

import org.eclipse.collections.api.list.MutableList;
import org.eclipse.collections.impl.factory.Lists;
import org.eclipse.collections.impl.test.Verify;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Arrays;
import java.util.List;

import org.junit.Ignore;
import org.junit.Test;
import org.opencv.core.Mat;
import org.opencv.core.MatOfPoint;
import org.opencv.core.Rect;
import org.opencv.imgproc.Imgproc;

public class OpenCvUtilsTest {

  public MutableList<Mat> getMatValueForAllImages() {
    MutableList<Mat> matValueForImages = Lists.mutable.empty();
    String filePath = Thread.currentThread().getContextClassLoader().getResource("formImages")
        .getPath();
    File[] imagesFolder = new File(filePath).listFiles();
    Arrays.sort(imagesFolder);
    for (File img : imagesFolder) {
      matValueForImages.add(OpenCvUtils.getMatFromFileImage(img.getAbsolutePath()));
    }
    return matValueForImages;
  }

  private void assertBorderedImage(MutableList<String> actualBufferedImageValues) throws Exception {
    MutableList<String> expectedBufferedImageValues = Lists.mutable.of(
        "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAABL0lEQVR42u2UW07DMBBFu5dilkRDXoUsDUpeINgANKUhBAmJV1VCEtJF8EPVOA4TG0xB4muEkJBHljX+uWfmju3e3S9HTwEUQAH+HBC6rqUNAs8dGkboe45tu/t7u5bpj0aOaZ0ERzuaiQIch4dko//jIv3s/hEFsHQNhFoelNL2IxrGGE/SaYICgBsAkNKQ1HUt8g5M2dMsw83A90QHq1XdroWwqKHsOklRAGOwJQBrRtVyBnBcFBUKYOvbEsC9+qIOMT2NUAC4oJ0VjH27PyAthoydQeAedIU3jWxC1t4RWJtEMQowNPRN0ikCQ/Txqc73+GyCAsBDJeRdlDVcVTwAXv7ry/IqukQBHN1e5FU8nlT5M8yzzArYs4f5xfi8mOe36U05K9V3rQAK8P8Bb17IeUdrFMObAAAAAElFTkSuQmCC",
        "iVBORw0KGgoAAAANSUhEUgAAACcAAAAnCAIAAAADwcZiAAAA1ElEQVR42u3WQQ6CMBAFUM4jcDJJoAs5BC7lBERIuQeLNi2Bg3gEUCf5sWGtjiycyYQUFjymfBKi2x4ViSqqqKJ+oj7eLVFFFfXP1bI8te21yPO+179Qm6ZRSsXxgTpJYjpqrVVRMKp0d2Drut5fhSdgVLPsuAWg0sJ7z6WeqypNkyBh6GBba1lUCk4YNLxU6mVZSJ3nmUXtuhbDQUXT9LhijGFRESVsbwgRTmncaZq40kQfKDY52Fg45xgzXNeXYRgosVuVcjSO4zdV+UcUVVRRd1GfEBBilBjBYGgAAAAASUVORK5CYII=",
        "iVBORw0KGgoAAAANSUhEUgAAACcAAAAmCAIAAADInRXHAAAAwklEQVR42u3WQQ6CMBAFUM4j5WSSQBdyCLwFsaTchKZN2oXHKeokPzau1ZGFM5kQYMHjt0NCdd2jKlFFFVXUT9T7uyWqqKL+uToMJ2Mufdcti/2FOk2T1rquD9RK1XS01uq+Z1Tp6cC2bbs9C2/AqLbt8RWASichBC71PI5No4qE0MV2zrGoNDglaNlU6pwzqSklFnWeDcJBRVN63FnXlUXFKGF5yxDhkuLGGLlU+kCxyFDLHnvvv6nK35qoooq6i/oAGX2w07GI/UoAAAAASUVORK5CYII=",
        "iVBORw0KGgoAAAANSUhEUgAAACcAAAArCAIAAAB0AwYZAAAA8ElEQVR42u3V3QoBQRQHcG9ixYNRJK2PjUeQIuVORKsN5V5yocXOfrV5Istu/OvUJPezUmea/s1c/ebMnmZzr1+MHKusssoqq6yyymr2atvoLk2r2TLmCzMLFVi1Vi/mNcySVkCurA14hWq5UiWJtmmaIukECtWO0SMAXpIkWCDj+BGEkSq1PxiCJEwOud0fjkrU9XYHlW718XzKRK2ww+imRJ3OFl9f9LPu81UoUfVmh9T7PZYkkk4gvEBVNzX0FnpYkvDokh3XV9jDo/HkZF8+ywJ8FZ7rh1m8TfbFwQTmCD+7F5H/Oayyyiqrf62+AWBtTYFfgLoxAAAAAElFTkSuQmCC"
    );
    Verify.assertListsEqual(expectedBufferedImageValues, actualBufferedImageValues);
  }

  private void assertResizeImage(MutableList<String> actualBufferedImageValues) throws Exception {
    MutableList<String> expectedBufferedImageValues = Lists.mutable.of(
        "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"
    );
    Verify.assertListsEqual(expectedBufferedImageValues, actualBufferedImageValues);
  }

  private void assertGrayImage(MutableList<String> actualBufferedImageValues) throws Exception {
    MutableList<String> expectedBufferedImageValues = Lists.mutable.of(
        "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"
    );
    Verify.assertListsEqual(expectedBufferedImageValues, actualBufferedImageValues);
  }

  private void assertThresholdImage(MutableList<String> actualBufferedImageValues)
      throws Exception {
    MutableList<String> expectedBufferedImageValues = Lists.mutable.of(
        "iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAAAAADmVT4XAAAA2klEQVR42u3YSwrEIBAFwL7/pZ3dfBxUENMKlpsEJKRoif1ilM0jAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJh4ZjYcBEUsFSwHv6U2Az/ylgLIX8DO/AVCOAmz4DEsuoHb8AR8G1JUo5wEiA1AaO38eoFHttCWo7+cKsBqQ046He8S9gJlItBAwl8nWAeIiQAyb5PPtuN+jM/JANyNcAYheSEqKZO2MlpUJmxnxGkC0QvK9v+c5gO0nJF+bcXWdeL1TMgAAAAAAAAAAAAAAAAAAAAAAAACAAwAvNBSroHI9WxsAAAAASUVORK5CYII=",
        "iVBORw0KGgoAAAANSUhEUgAAAJwAAACcCAAAAACv052RAAAAs0lEQVR42u3YMQ6DMBAAQf7/6UsbRTkUKhZlpsQUq2Bj4uMAAAAAAAAAAAAAAOCvzLtyW6xuJlw30bo5E067u27CddONm+nGTTjupKIWt42Ju7jVh+L28fsX635H4KF+XEpt95VFcDbftldeYb4ta7cQt+5agbh9T71jBooTJ+4hq/VRcemXcHT7Cm786U+m9sfmT/9NE4cR+w3dny4c1zlj2kbFXX+ujWPNAwAAAAAA4JsXFIvHYwEIPowAAAAASUVORK5CYII=",
        "iVBORw0KGgoAAAANSUhEUgAAAJwAAACYCAAAAAA0Qt+HAAABAklEQVR42u3YUQ7DIAgAUO9/aXaAjdoaIzR7/ArJa6NCO6JxDDg4ODg4ODg4ODg4ODg4ODg4ODg4ODi4XbixMXbjxijQwcHBwcHBwcHBwcHBwcHBwcHBwcH9M+5J+mnco/zDuGcF1bjogVuoO4VbKuyCi0Jc9MWtVp7ARWPcRUo3XLYG97DVN8Ll52WU4/JbsKh9/Vhdna+24y5sKzPMVtyvpezKK8RdvcsuuLSgAS6vKMANODi4l5zWV+FaX8JN21frxj8ZmaIaF+lnw41B9SzuK6sRbrwEd2vG34CL+a+IZMdNn2wDriLg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4GbxAeGpp1sjrFnVAAAAAElFTkSuQmCC",
        "iVBORw0KGgoAAAANSUhEUgAAAJwAAACsCAAAAACrqZo8AAAAuElEQVR42u3ZQQqEMBBFwb7/pdutm5YIM/QHq7YR5jFKjEkVAAAAAAAAAAAAAACf0nfJbWF5HRzXHVrXT4LTtus6uK5j4/pEcltI3DAUETeNiXv5qg+Km4f3Z5KHK/Zv6nxRcNvSn3c8kW08d8dThThx4sSJEyfu5y/+rCX6+pKukxebR3c2+RsiZKtkHg+Ny9lkGgcT4qYv/qrI+7q+6Xr/+Q4+JUk+JKnktuyzLwAAAAAAAADgry6R2jX13pKZswAAAABJRU5ErkJggg=="
    );
    Verify.assertListsEqual(expectedBufferedImageValues, actualBufferedImageValues);
  }

  private void assertInvertedThresholdImage(MutableList<String> actualBufferedImageValues)
      throws Exception {
    MutableList<String> expectedBufferedImageValues = Lists.mutable.of(
        "iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAAAAADmVT4XAAAAuUlEQVR42u3YQQ6DIBAF0Ln/pemmi5ZmYFMGDO9tNDGRL0b5GgEAAAAAAPA8bWb3+KsTTAZen2B24RcHiL0Bvo5vCBBHBdjwGEZtgD7HT8DFAfqZiPMCtIoAkbz56wIks112C/r9qgkYB6hZjqfviHsD1FSi9PRVnSw7fbsoQJsukuuX4/EaXdEHhh3higBtVJKKKlne0ao6YdoRrwnQspJ87+f5KX8oav7RfPbP97ZoeAAAAAAA/uwFywQYE4dSKFoAAAAASUVORK5CYII=",
        "iVBORw0KGgoAAAANSUhEUgAAAJwAAACcCAAAAACv052RAAAA+UlEQVR42u3Zuw6DMBAEwP3/nyZtith5GXktzbWmGGHwHkeu4gocHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHNxyXJ6rDJes1+Ue2xrdbbh04DKrvbi8qWpcNuLSi0t6cSnGTRRtuNEa3JdRX4Qbr1/bceMrNsXXiz1d2839gZvYlumy8HkbHXkbcbN72YIbplYBbpypG3AXHBzcIW/rUbjqQ7g0vgqDv7pl6m42P/o23ThleotLBS7H4fYOD+fjmsD9uK8LDpUFuOu28u8LDg4ODg4ODg4ODg4ODg4ODg4ODg4O7mjcAxuf7wIWhVW3AAAAAElFTkSuQmCC",
        "iVBORw0KGgoAAAANSUhEUgAAAJwAAACYCAAAAAA0Qt+HAAAA4ElEQVR42u3XURKDIAxAwdz/0vQANSoMhWj3/UJmtp0qNEKSJEmSJEmSJP1DbWKVbdN1cHBwcHBwcHBwcHBwcHBwcHBwcHBvxPVsX43r2r8Y1zewGxc1cANzq3BDg1VwsREXdXGjkytwURh3sqUaLluD6zzqC+Hy56Vtx+VvwU3H18Hq6P1qOu7ENnKHmYo7WspeeRtxZ99lFVw6UACXT2zANTg4uIc8rY/ClX4JFz2+Sh/8F1em2I2L9G/DjYvqWtzXrkK49hDcrTv+D3QHq8kv7vKTSZIkSZIkSZKkl/YBLvehXOkr26IAAAAASUVORK5CYII=",
        "iVBORw0KGgoAAAANSUhEUgAAAJwAAACsCAAAAACrqZo8AAABDElEQVR42u3Z0Q7CIAwF0Pv/Pz3fzDTOYQa2xtNXSDgbG7SQrXEEDg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg5uOi77aIbLU3TCpTEuWaHLEtgkYpbSLuqW41KIS1tcRqIIlx/CHTS1wB21wX241TfCHTdv5bg3PWpwQ8tF0d46upRdeXlZ8709dqzDbXBwcHBwcHBf3vgrs5KT0S+kdFPyuXbJ5tDMdq4hehQ4OW5viutSGr4wVB8ejlT8VX/rybxOOLW++Gi74eef9P/HJcmWzm+u9d3XioCDg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4O7xw1OWTdVLGwhMwAAAABJRU5ErkJggg=="
    );
    Verify.assertListsEqual(expectedBufferedImageValues, actualBufferedImageValues);
  }

  private void assertContours(MutableList<MutableList<Double>> actualContourAreas) {
    MutableList<MutableList<Double>> expectedContourAreas = Lists.mutable.of(
        Lists.mutable.of(1332.0, 1024.0),
        Lists.mutable.of(24336.0, 72.0, 64.0, 400.0, 1936.0),
        Lists.mutable.of(5772.0),
        Lists.mutable.of(26832.0, 108.0, 100.0, 108.0, 1936.0)
    );
    Verify.assertListsEqual(expectedContourAreas, actualContourAreas);
  }

  @Test
  public void testColorOfCenter() throws Exception {
    if (!OpenCvUtils.isLibraryLoaded()) {
      return;
    }
    MutableList<Mat> matValuesForTestImages = this.getMatValueForAllImages();

    MutableList<String> borderedImageValues = Lists.mutable.empty();
    MutableList<Mat> borderedImage = Lists.mutable.empty();
    for (Mat matImage : matValuesForTestImages) {
      Mat borderImage = OpenCvUtils.getBorderedImg(matImage);
      BufferedImage bufferedImage = OpenCvUtils.getBufferedImageFromMat(borderImage);
      borderedImage.add(borderImage);
      String e = ImageUtils.toBase64PngBinary(bufferedImage);
      borderedImageValues.add(e);
    }
    this.assertBorderedImage(borderedImageValues);

    MutableList<String> resizedImageValues = Lists.mutable.empty();
    MutableList<Mat> resizedImage = Lists.mutable.empty();
    for (Mat matImage : borderedImage) {
      Mat resizeImage = OpenCvUtils.getResizedImage(matImage, 4, 4);
      BufferedImage bufferedImage = OpenCvUtils.getBufferedImageFromMat(resizeImage);
      resizedImage.add(resizeImage);
      resizedImageValues.add(ImageUtils.toBase64PngBinary(bufferedImage));
    }
    this.assertResizeImage(resizedImageValues);

    MutableList<String> grayedImageValues = Lists.mutable.empty();
    MutableList<Mat> grayedImage = Lists.mutable.empty();
    for (Mat matImage : resizedImage) {
      Mat grayImage = OpenCvUtils.getGrayImage(matImage);
      BufferedImage bufferedImage = OpenCvUtils.getBufferedImageFromMat(grayImage);
      grayedImage.add(grayImage);
      grayedImageValues.add(ImageUtils.toBase64PngBinary(bufferedImage));
    }
    this.assertGrayImage(grayedImageValues);

    MutableList<String> thresholdImageValues = Lists.mutable.empty();
    MutableList<Mat> thresholdImage = Lists.mutable.empty();
    for (Mat matImage : grayedImage) {
      Mat matValue = OpenCvUtils.getThresholdImage(matImage);
      BufferedImage bufferedImage = OpenCvUtils.getBufferedImageFromMat(matValue);
      thresholdImage.add(matValue);
      thresholdImageValues.add(ImageUtils.toBase64PngBinary(bufferedImage));
    }
    this.assertThresholdImage(thresholdImageValues);

    MutableList<String> invertedThresholdImageValues = Lists.mutable.empty();
    MutableList<Mat> invertedThresholdImage = Lists.mutable.empty();
    for (Mat matImage : thresholdImage) {
      Mat matValue = OpenCvUtils.getInvertedThreshold(matImage);
      BufferedImage bufferedImage = OpenCvUtils.getBufferedImageFromMat(matValue);
      invertedThresholdImage.add(matValue);
      invertedThresholdImageValues.add(ImageUtils.toBase64PngBinary(bufferedImage));
    }
    this.assertInvertedThresholdImage(invertedThresholdImageValues);

    MutableList<MutableList<Double>> contoursArea = Lists.mutable.empty();
    for (Mat matImage : invertedThresholdImage) {
      MutableList<Double> list = Lists.mutable.empty();
      List<MatOfPoint> contours = OpenCvUtils.getContours(matImage);
      for (MatOfPoint contour : contours) {
        Rect rect = Imgproc.boundingRect(contour);
        list.add(rect.area());
      }
      contoursArea.add(list);
    }
    this.assertContours(contoursArea);

    MutableList<Double> expectedColorOfCenter = Lists.mutable.of(0.0, 0.0, 0.0, 255.0);
    MutableList<Double> actualColorOfCenter = Lists.mutable.empty();
    for (Mat matImage : matValuesForTestImages) {
      actualColorOfCenter.add(OpenCvUtils.getImageCenterColor(matImage));
    }
    Verify.assertListsEqual(expectedColorOfCenter, actualColorOfCenter);
  }
}
